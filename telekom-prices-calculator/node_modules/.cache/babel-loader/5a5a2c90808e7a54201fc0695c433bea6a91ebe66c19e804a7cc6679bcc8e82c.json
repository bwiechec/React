{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\React\\\\telekom-prices-calculator\\\\src\\\\components\\\\ServiceCalculator\\\\ServiceCalculator.js\",\n  _s = $RefreshSig$();\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport * as utils from \"../../Utils/utlis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ServiceCalculator(props) {\n  _s();\n  const [selectedYear, setSelectedYear] = useState();\n  const findBestDeal = () => {\n    var _props$selectedServic;\n    //ZMIENNA PRZECHOWUJACA CENE LACZNA DLA DANEJ KOMBINACJI PAKIETOW\n    let totalPrice = 0;\n    //ZMIENNA PRZECHOWUJACA NAJLEPSZA CENE PAKIETOW\n    let bestPrice = -1;\n    //WYBRANE PAKIETY\n    let selectedIndexes = [];\n\n    //JESLI NIE WYBRANO ROKU LUB USLUGI CENA - 0\n    if (!selectedYear || !props.selectedServices.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Suma: \", totalPrice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 65\n    }, this);\n\n    //JESLI WYBRANO TYLKO JEDNA USLUGE\n    if (props.selectedServices.length === 1) return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Suma: \", utils.pricesMatrix[props.selectedServices[0]][selectedYear]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wybrane us\\u0142ugi: \", utils.serviceNames[props.selectedServices[0]]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n\n    //SPRAWDZAM CENY DLA KAZDEGO INDEKSU\n    (_props$selectedServic = props.selectedServices) === null || _props$selectedServic === void 0 ? void 0 : _props$selectedServic.forEach(service => {\n      let servicesTemp = [...props.selectedServices].filter(serv => serv !== service);\n      let selectedIndexesTemp = [];\n      //W OBREBIE DANEGO INDEKSU SPRAWDZAM KAZDY INNY PO KOLEI CZY TWORZA PAKIET\n      servicesTemp.forEach(serviceTemp => {\n        totalPrice = 0;\n        selectedIndexesTemp = [];\n        let servicesTempToSum = [...servicesTemp].filter(serv => serv !== serviceTemp);\n        if (utils.pricesMatrix[service + serviceTemp]) {\n          //JESLI TWORZA PAKIET DODAJE GO DO SUMY\n          totalPrice += utils.pricesMatrix[service + serviceTemp][selectedYear];\n          selectedIndexesTemp.push(service + serviceTemp);\n        } else {\n          //JESLI NIE TWORZA PAKIETU DODAJE JE OSOBNO\n          totalPrice += utils.pricesMatrix[service][selectedYear] + utils.pricesMatrix[serviceTemp][selectedYear];\n          selectedIndexesTemp.push(service);\n          selectedIndexesTemp.push(serviceTemp);\n        }\n        //NASTEPNIE WSZYSTKIE INNE USLUGI DODAJE\n        servicesTempToSum.forEach(serviceToSum => {\n          //JESLI SPRAWDZAM CENY DLA PAKIETU INTERNET + TELEWIZJA I AKTUALNIE JESTESM NA DEKODERZE USTAWIAM MU CENE 0\n          serviceToSum === utils.DECODER && service + serviceTemp === utils.INTERNET_TV ? totalPrice += 0 : totalPrice += utils.pricesMatrix[serviceToSum][selectedYear];\n          selectedIndexesTemp.push(serviceToSum);\n        });\n        //PRZYPISUJE WYBRANE PAKIETY I MINIMALNA CENE ZE ZMIENNYCH POMOCNICZYCH\n        selectedIndexes = bestPrice > totalPrice || bestPrice === -1 ? selectedIndexesTemp : selectedIndexes;\n        bestPrice = bestPrice > totalPrice || bestPrice === -1 ? totalPrice : bestPrice;\n        console.log(bestPrice);\n        console.log(selectedIndexesTemp);\n        console.log(props.selectedServices);\n      });\n    });\n    //FORMATUJE INDEKSY TAK, ABY BYLA INFORMACJA ZWROTNA O WYBRANYCH PAKIETACH\n    let selectedServicesString = selectedIndexes.map(service => {\n      return utils.serviceNames[service];\n    });\n    console.log(selectedIndexes);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Suma: \", bestPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wybrane us\\u0142ugi: \", selectedServicesString.join(', '), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"service-calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: utils.yearOptions,\n      onChange: selected => setSelectedYear(selected.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"service-calculator__summary\",\n      children: findBestDeal()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(ServiceCalculator, \"MrMte6deRnur+RXpA0hVVgg6iU0=\");\n_c = ServiceCalculator;\n;\nvar _c;\n$RefreshReg$(_c, \"ServiceCalculator\");","map":{"version":3,"names":["Select","useState","utils","jsxDEV","_jsxDEV","Fragment","_Fragment","ServiceCalculator","props","_s","selectedYear","setSelectedYear","findBestDeal","_props$selectedServic","totalPrice","bestPrice","selectedIndexes","selectedServices","length","children","fileName","_jsxFileName","lineNumber","columnNumber","pricesMatrix","serviceNames","forEach","service","servicesTemp","filter","serv","selectedIndexesTemp","serviceTemp","servicesTempToSum","push","serviceToSum","DECODER","INTERNET_TV","console","log","selectedServicesString","map","join","className","options","yearOptions","onChange","selected","value","_c","$RefreshReg$"],"sources":["D:/GitHub/React/telekom-prices-calculator/src/components/ServiceCalculator/ServiceCalculator.js"],"sourcesContent":["import Select from \"react-select\";\r\nimport {useState} from \"react\";\r\nimport * as utils from \"../../Utils/utlis\"\r\n\r\nexport default function ServiceCalculator(props) {\r\n  const [selectedYear, setSelectedYear] = useState();\r\n\r\n  const findBestDeal = () => {\r\n    //ZMIENNA PRZECHOWUJACA CENE LACZNA DLA DANEJ KOMBINACJI PAKIETOW\r\n    let totalPrice = 0;\r\n    //ZMIENNA PRZECHOWUJACA NAJLEPSZA CENE PAKIETOW\r\n    let bestPrice = -1;\r\n    //WYBRANE PAKIETY\r\n    let selectedIndexes = [];\r\n\r\n    //JESLI NIE WYBRANO ROKU LUB USLUGI CENA - 0\r\n    if(!selectedYear || !props.selectedServices.length) return (<p>Suma: {totalPrice}</p>);\r\n\r\n    //JESLI WYBRANO TYLKO JEDNA USLUGE\r\n    if(props.selectedServices.length === 1)\r\n      return (\r\n        <>\r\n          <p>Suma: {utils.pricesMatrix[props.selectedServices[0]][selectedYear]}</p>\r\n          <p>Wybrane usługi: {utils.serviceNames[props.selectedServices[0]]}</p>\r\n        </>\r\n      )\r\n\r\n    //SPRAWDZAM CENY DLA KAZDEGO INDEKSU\r\n    props.selectedServices?.forEach(service => {\r\n      let servicesTemp = [...props.selectedServices].filter(serv => serv !== service);\r\n      let selectedIndexesTemp = [];\r\n      //W OBREBIE DANEGO INDEKSU SPRAWDZAM KAZDY INNY PO KOLEI CZY TWORZA PAKIET\r\n      servicesTemp.forEach(serviceTemp => {\r\n        totalPrice = 0;\r\n        selectedIndexesTemp = []\r\n        let servicesTempToSum = [...servicesTemp].filter(serv => serv !== serviceTemp);\r\n        if(utils.pricesMatrix[service + serviceTemp]){\r\n          //JESLI TWORZA PAKIET DODAJE GO DO SUMY\r\n          totalPrice += utils.pricesMatrix[service + serviceTemp][selectedYear]\r\n          selectedIndexesTemp.push(service + serviceTemp);\r\n        }\r\n        else{\r\n          //JESLI NIE TWORZA PAKIETU DODAJE JE OSOBNO\r\n          totalPrice += utils.pricesMatrix[service][selectedYear] + utils.pricesMatrix[serviceTemp][selectedYear];\r\n          selectedIndexesTemp.push(service);\r\n          selectedIndexesTemp.push(serviceTemp);\r\n        }\r\n        //NASTEPNIE WSZYSTKIE INNE USLUGI DODAJE\r\n        servicesTempToSum.forEach(serviceToSum => {\r\n          //JESLI SPRAWDZAM CENY DLA PAKIETU INTERNET + TELEWIZJA I AKTUALNIE JESTESM NA DEKODERZE USTAWIAM MU CENE 0\r\n          serviceToSum === utils.DECODER && (service + serviceTemp) === utils.INTERNET_TV?\r\n            totalPrice += 0\r\n              :\r\n            totalPrice += utils.pricesMatrix[serviceToSum][selectedYear];\r\n            selectedIndexesTemp.push(serviceToSum);\r\n        })\r\n        //PRZYPISUJE WYBRANE PAKIETY I MINIMALNA CENE ZE ZMIENNYCH POMOCNICZYCH\r\n        selectedIndexes = bestPrice > totalPrice || bestPrice === -1 ? selectedIndexesTemp : selectedIndexes;\r\n        bestPrice = bestPrice > totalPrice || bestPrice === -1 ? totalPrice : bestPrice;\r\n        console.log(bestPrice)\r\n        console.log(selectedIndexesTemp)\r\n        console.log(props.selectedServices)\r\n      })\r\n    })\r\n    //FORMATUJE INDEKSY TAK, ABY BYLA INFORMACJA ZWROTNA O WYBRANYCH PAKIETACH\r\n    let selectedServicesString = selectedIndexes.map(service => {\r\n      return utils.serviceNames[service]\r\n    })\r\n    console.log(selectedIndexes)\r\n    return (\r\n      <>\r\n        <p>Suma: {bestPrice}</p>\r\n        <p>Wybrane usługi: {selectedServicesString.join(', ')} </p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"service-calculator\">\r\n\r\n      <Select\r\n        options={utils.yearOptions}\r\n        onChange={(selected) => setSelectedYear(selected.value)}\r\n      />\r\n\r\n      <div\r\n        className=\"service-calculator__summary\"\r\n      >\r\n        {findBestDeal()}\r\n      </div>\r\n    </div>\r\n  )\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}